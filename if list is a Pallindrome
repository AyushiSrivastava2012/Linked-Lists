#include <bits/stdc++.h>
using namespace std;

struct node{
	int data=0;
	struct node* next=NULL;
};
void printlist(struct node* n){
	while(n!=NULL){
		cout<<n->data<<" ";
		n=n->next;
	}
}
struct node* insertion(struct node* start,int data, int n){
	if(start==NULL)
	return NULL;
	struct node* tmp=(struct node*)malloc(sizeof(struct node));
	tmp->data=data;
	if(n==1){
		tmp->next=start;
		start=tmp;
	}
	else{
		int i=1;
		struct node* tmp2=start;
		while(i<n-1){
			i++;
			tmp2=tmp2->next;
		}
		tmp->next=tmp2->next;
		tmp2->next=tmp;
	}
	return start;
}
//----------------------------------------------------------------------
void ispallindrome(struct node* head){
	stack<int>S;
	struct node *slow=head,*fast=head;
	int f=0;
	while(fast!=NULL && fast->next!=NULL){
		S.push(slow->data);
		slow=slow->next;
		fast=fast->next;
	}
	slow=slow->next;
	while(slow!=NULL){
		if(S.top()!=slow->data){
			f=1;
			break;
		}
		S.pop();
		slow=slow->next;
	}
	if(f==1){
		cout<<"NO";
	}
	else{
		cout<<"YES";
	}
}
int main() {
	struct node* head=(struct node*)malloc(sizeof(struct node));
	struct node* second=(struct node*)malloc(sizeof(struct node));
	struct node* third=(struct node*)malloc(sizeof(struct node));
	head->data=1;
	head->next=second;
	second->data=2;
	second->next=third;
	third->data=3;
	third->next=NULL;
	head=insertion(head,2,4);
	head=insertion(head,1,5);
	printlist(head);
	ispallindrome(head);
	return 0;
}
